import logging
import os
import json
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = list(map(int, os.getenv("OWNER_IDS", "").split(","))) if os.getenv("OWNER_IDS") else []
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_USERNAME = "@Tester894bot"
USER_DATA_FILE = "user_data.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_NAME, BROADCAST_MESSAGE = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    try:
        with open(USER_DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_user_data(data):
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

user_data = load_user_data()

async def is_owner(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    result = user_id in OWNER_IDS
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è {user_id}: {'–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω' if result else '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}")
    return result

async def debug_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    user_id = update.effective_user.id
    await update.message.reply_text(
        f"üîç –í–∞—à ID: {user_id}\n"
        f"OWNER_IDS: {OWNER_IDS}\n"
        f"–í—ã —É—á–∏—Ç–µ–ª—å: {'‚úÖ' if await is_owner(user_id) else '‚ùå'}"
    )

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–º–∞–Ω–¥—ã /broadcast"""
    user_id = update.effective_user.id
    if not await is_owner(user_id):
        await update.message.reply_text(f"‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –í–∞—à ID: {user_id}")
        return
    
    logger.info(f"–£—á–∏—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É")
    await update.message.reply_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ):\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )
    return BROADCAST_MESSAGE

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    if not user_data:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return ConversationHandler.END

    status_msg = await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    successful = 0
    failed = []

    try:
        # –î–ª—è —Ç–µ–∫—Å—Ç–∞
        if update.message.text:
            for user_id_str, user_info in user_data.items():
                try:
                    await context.bot.send_message(
                        chat_id=int(user_id_str),
                        text=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç —É—á–∏—Ç–µ–ª—è:\n\n{update.message.text}"
                    )
                    successful += 1
                except Exception as e:
                    failed.append(user_id_str)
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_id_str}: {e}")

        # –î–ª—è —Ñ–æ—Ç–æ
        elif update.message.photo:
            photo = update.message.photo[-1].file_id
            caption = update.message.caption or ""
            for user_id_str, user_info in user_data.items():
                try:
                    await context.bot.send_photo(
                        chat_id=int(user_id_str),
                        photo=photo,
                        caption=f"üì¢ {caption}" if caption else "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è"
                    )
                    successful += 1
                except Exception as e:
                    failed.append(user_id_str)
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è {user_id_str}: {e}")

        # –û—Ç—á–µ—Ç
        report = [
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:",
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}",
            f"‚Ä¢ –û—à–∏–±–æ–∫: {len(failed)}"
        ]
        if failed:
            report.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {', '.join(failed[:5])}{'...' if len(failed) > 5 else ''}")
        
        await status_msg.edit_text("\n".join(report))

    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        await status_msg.edit_text("‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")

    return ConversationHandler.END

# –ò–ò-–∫–æ–º–∞–Ω–¥—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã)
async def theorem_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: /theorem –¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞")
        return
    
    query = " ".join(context.args)
    await update.message.reply_chat_action(action="typing")
    
    prompt = (
        f"–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É '{query}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –î–∞–π—Ç–µ:\n"
        f"1. –ß–µ—Ç–∫—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É\n"
        f"2. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ\n"
        f"3. –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è\n"
        f"4. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n\n"
        f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–æ—á–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º."
    )
    
    response = await ask_ai(prompt)
    if response:
        await update.message.reply_text(f"üìö –¢–µ–æ—Ä–µ–º–∞ {query}:\n\n{response}")
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "1. –ü—Ä–æ–±–ª–µ–º—ã —Å API\n"
            "2. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤\n"
            "3. –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        )

async def formula_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: /formula –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ")
        return
    
    query = " ".join(context.args)
    await update.message.reply_chat_action(action="typing")
    
    prompt = (
        f"–û–±—ä—è—Å–Ω–∏ —Ñ–æ—Ä–º—É–ª—É '{query}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:\n"
        f"- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å\n- –ü–æ—è—Å–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n- –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n- –¢–∏–ø–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏"
    )
    
    response = await ask_ai(prompt)
    if response:
        await update.message.reply_text(f"üßÆ –§–æ—Ä–º—É–ª–∞ {query}:\n\n{response}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: /task –ù–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Ä–∞–¥–∏—É—Å–æ–º 5 —Å–º")
        return
    
    query = " ".join(context.args)
    await update.message.reply_chat_action(action="typing")
    
    prompt = (
        f"–†–µ—à–∏ –∑–∞–¥–∞—á—É: '{query}'. –î–∞–π—Ç–µ:\n"
        f"1. –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞\n"
        f"2. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è\n"
        f"3. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
        f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–æ—á–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º."
    )
    
    response = await ask_ai(prompt)
    if response:
        await update.message.reply_text(f"üìù –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n{response}")
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "1. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏\n"
            "2. –ü—Ä–æ–±–ª–µ–º—ã —Å API\n"
            "3. –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ–∑–∂–µ."
        )

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    elif context.args:
        query = " ".join(context.args)
        await update.message.reply_chat_action(action="typing")
        
        prompt = f"–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        
        response = await ask_ai(prompt)
        if response:
            await update.message.reply_text(f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n{response}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/task <—Ç–µ–∫—Å—Ç> - –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/theorem <—Ç–µ–∫—Å—Ç> - –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–æ—Ä–µ–º—É\n"
        "/formula <—Ç–µ–∫—Å—Ç> - –ù–∞–π—Ç–∏ —Ñ–æ—Ä–º—É–ª—É\n"
        "/search <—Ç–µ–∫—Å—Ç> - –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
    )
    
    if await is_owner(update.effective_user.id):
        help_text += (
            "\nüë®‚Äçüè´ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∏—Ç–µ–ª—è:\n"
            "/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "/list - –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤"
        )
    
    await update.message.reply_text(help_text)

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_owner(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not user_data:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return
    
    user_list = "\n".join(
        f"@{data['username']} - {data['full_name']} (ID: {user_id})"
        for user_id, data in user_data.items()
    )
    
    await update.message.reply_text(f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{user_list}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error: {context.error}")
    if update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("debug_id", debug_id))
    app.add_handler(CommandHandler("broadcast", broadcast_command))
    
    # –ó–∞—Ç–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            BROADCAST_MESSAGE: [
                MessageHandler(filters.TEXT | filters.PHOTO, broadcast_message),
                CommandHandler("cancel", cancel)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv_handler)

    # –ò–ò-–∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("theorem", theorem_command))
    app.add_handler(CommandHandler("formula", formula_command))
    app.add_handler(CommandHandler("task", task_command))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("list", list_command))

    app.add_error_handler(error_handler)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π")
    app.run_polling()

if __name__ == "__main__":
    main()

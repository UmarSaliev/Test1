import logging
import os
import json
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = list(map(int, os.getenv("OWNER_IDS", "").split(","))) if os.getenv("OWNER_IDS") else []
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_USERNAME = "@Tester894bot"
USER_DATA_FILE = "user_data.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_NAME = 0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ---
def load_user_data():
    try:
        with open(USER_DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_user_data(data):
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

user_data = load_user_data()

async def is_owner(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∏—Ç–µ–ª–µ–º"""
    return user_id in OWNER_IDS

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ ---
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo and update.message.caption:
        user_id = update.effective_user.id
        user_info = user_data.get(str(user_id), {})
        
        caption = (
            f"üì© –û—Ç —É—á–µ–Ω–∏–∫–∞ {user_info.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
            f"@{user_info.get('username', '–Ω–µ—Ç_username')}\n\n"
            f"{update.message.caption}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º —É—á–∏—Ç–µ–ª—è–º
        for teacher_id in OWNER_IDS:
            try:
                await context.bot.send_photo(
                    chat_id=teacher_id,
                    photo=update.message.photo[-1].file_id,
                    caption=caption
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—á–∏—Ç–µ–ª—é {teacher_id}: {e}")
        
        await update.message.reply_text("‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∏—Ç–µ–ª—è–º")

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π ---
async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_owner(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π")
        return
    
    if not user_data:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç")
        return
    
    user_list = "\n".join(
        f"@{data['username']} - {data['full_name']} (ID: {user_id})"
        for user_id, data in user_data.items()
    )
    await update.message.reply_text(f"üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n\n{user_list}")

# --- –ò–ò-–∫–æ–º–∞–Ω–¥—ã ---
async def ask_ai(prompt: str) -> str:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò"""
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": f"https://t.me/{BOT_USERNAME[1:]}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "meta-llama/llama-3-70b-instruct",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=30
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    return data["choices"][0]["message"]["content"]
                logger.error(f"API Error: {await response.text()}")
    except Exception as e:
        logger.error(f"AI request failed: {str(e)}")
    return None

async def task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á (/task)"""
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: /task 2+2")
        return
    
    query = " ".join(context.args)
    await update.message.reply_chat_action("typing")
    
    response = await ask_ai(
        f"–†–µ—à–∏ –∑–∞–¥–∞—á—É: '{query}'. –û–±—ä—è—Å–Ω–∏ —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —à–∫–æ–ª—å–Ω–∏–∫—É."
    )
    
    await update.message.reply_text(response or "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É")

async def formula_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª (/formula)"""
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: /formula –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞")
        return
    
    query = " ".join(context.args)
    await update.message.reply_chat_action("typing")
    
    response = await ask_ai(
        f"–û–±—ä—è—Å–Ω–∏ —Ñ–æ—Ä–º—É–ª—É: '{query}'. –ü—Ä–∏–≤–µ–¥–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–ø–∏—Å—å, "
        f"–ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    )
    
    await update.message.reply_text(response or "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")

async def theorem_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ–º (/theorem)"""
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: /theorem –ü–∏—Ñ–∞–≥–æ—Ä–∞")
        return
    
    query = " ".join(context.args)
    await update.message.reply_chat_action("typing")
    
    response = await ask_ai(
        f"–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É {query} –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü—Ä–∏–≤–µ–¥–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É, "
        f"–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è."
    )
    
    await update.message.reply_text(response or "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (/search)"""
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: /search –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã")
        return
    
    query = " ".join(context.args)
    await update.message.reply_chat_action("typing")
    
    response = await ask_ai(
        f"–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'. "
        f"–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏."
    )
    
    await update.message.reply_text(response or "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")

# --- –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    if str(user_id) not in user_data:
        await update.message.reply_text("üëã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
        return GET_NAME
    await update.message.reply_text("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
    return ConversationHandler.END

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    user_data[str(user_id)] = {
        "full_name": update.message.text,
        "username": update.effective_user.username or "–Ω–µ—Ç_username"
    }
    save_user_data(user_data)
    await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º (/help)"""
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/task - –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/formula - –û–±—ä—è—Å–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É\n"
        "/theorem - –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–æ—Ä–µ–º—É\n"
        "/search - –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
    )
    if await is_owner(update.effective_user.id):
        help_text += "\nüë®‚Äçüè´ –ö–æ–º–∞–Ω–¥—ã —É—á–∏—Ç–µ–ª—è:\n/list - –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤"
    await update.message.reply_text(help_text)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(MessageHandler(filters.PHOTO & filters.CAPTION, handle_media))
    
    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={GET_NAME: [MessageHandler(filters.TEXT, get_name)]},
        fallbacks=[]
    ))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    commands = [
        ("help", help_command),
        ("task", task_command),
        ("formula", formula_command),
        ("theorem", theorem_command),
        ("search", search_command),
        ("list", list_command)
    ]
    for cmd, handler in commands:
        app.add_handler(CommandHandler(cmd, handler))

    app.add_error_handler(lambda u, c: logger.error(c.error))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()

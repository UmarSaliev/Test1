import logging
import os
import json
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = list(map(int, os.getenv("OWNER_IDS", "").split(","))) if os.getenv("OWNER_IDS") else []
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_USERNAME = "@Tester894bot"
USER_DATA_FILE = "user_data.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_NAME, BROADCAST_MESSAGE = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è broadcast ---
def load_user_data():
    try:
        with open(USER_DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_user_data(data):
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

user_data = load_user_data()

async def is_owner(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    result = user_id in OWNER_IDS
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è {user_id}: {'–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω' if result else '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}")
    return result

async def debug_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    user_id = update.effective_user.id
    await update.message.reply_text(
        f"üîç –í–∞—à ID: {user_id}\n"
        f"OWNER_IDS: {OWNER_IDS}\n"
        f"–í—ã —É—á–∏—Ç–µ–ª—å: {'‚úÖ' if await is_owner(user_id) else '‚ùå'}"
    )

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–º–∞–Ω–¥—ã /broadcast"""
    user_id = update.effective_user.id
    if not await is_owner(user_id):
        await update.message.reply_text(f"‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –í–∞—à ID: {user_id}")
        return
    
    logger.info(f"–£—á–∏—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É")
    await update.message.reply_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ):\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )
    return BROADCAST_MESSAGE

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    if not user_data:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return ConversationHandler.END

    status_msg = await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    successful = 0
    failed = []

    try:
        # –î–ª—è —Ç–µ–∫—Å—Ç–∞
        if update.message.text:
            for user_id_str, user_info in user_data.items():
                try:
                    await context.bot.send_message(
                        chat_id=int(user_id_str),
                        text=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç —É—á–∏—Ç–µ–ª—è:\n\n{update.message.text}"
                    )
                    successful += 1
                except Exception as e:
                    failed.append(user_id_str)
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_id_str}: {e}")

        # –î–ª—è —Ñ–æ—Ç–æ
        elif update.message.photo:
            photo = update.message.photo[-1].file_id
            caption = update.message.caption or ""
            for user_id_str, user_info in user_data.items():
                try:
                    await context.bot.send_photo(
                        chat_id=int(user_id_str),
                        photo=photo,
                        caption=f"üì¢ {caption}" if caption else "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è"
                    )
                    successful += 1
                except Exception as e:
                    failed.append(user_id_str)
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è {user_id_str}: {e}")

        # –û—Ç—á–µ—Ç
        report = [
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:",
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}",
            f"‚Ä¢ –û—à–∏–±–æ–∫: {len(failed)}"
        ]
        if failed:
            report.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {', '.join(failed[:5])}{'...' if len(failed) > 5 else ''}")
        
        await status_msg.edit_text("\n".join(report))

    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        await status_msg.edit_text("‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")

    return ConversationHandler.END

# --- –í—Å–µ –ò–ò-–∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
async def theorem_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async def formula_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async def task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–æ–∂–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("debug_id", debug_id))  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    app.add_handler(CommandHandler("broadcast", broadcast_command))
    
    # –ó–∞—Ç–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            BROADCAST_MESSAGE: [
                MessageHandler(filters.TEXT | filters.PHOTO, broadcast_message),
                CommandHandler("cancel", cancel)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv_handler)

    # –ò–ò-–∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("theorem", theorem_command))
    app.add_handler(CommandHandler("formula", formula_command))
    app.add_handler(CommandHandler("task", task_command))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("list", list_command))

    app.add_error_handler(error_handler)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π")
    app.run_polling()

if __name__ == "__main__":
    main()

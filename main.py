import logging
import os
import json
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = list(map(int, os.getenv("OWNER_IDS", "").split(","))) if os.getenv("OWNER_IDS") else []
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_USERNAME = "@Tester894bot"
USER_DATA_FILE = "user_data.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_NAME, BROADCAST_MESSAGE = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    try:
        with open(USER_DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_user_data(data):
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(data, f)

user_data = load_user_data()

async def is_owner(user_id: int) -> bool:
    return user_id in OWNER_IDS

async def ask_ai(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": f"https://t.me/{BOT_USERNAME[1:]}",
        "X-Title": "MathHelperBot"
    }
    payload = {
        "model": "openrouter/auto",
        "messages": [{"role": "user", "content": prompt}]
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=20)
            ) as response:
                if response.status != 200:
                    error = await response.text()
                    logger.error(f"API Error: {error}")
                    return None
                
                data = await response.json()
                return data["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"AI Error: {str(e)}")
        return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if str(user_id) not in user_data:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:"
        )
        return GET_NAME
    else:
        await update.message.reply_text(
            "ü§ñ –Ø –≤–∞—à –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )
        return ConversationHandler.END

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    full_name = update.message.text
    username = update.effective_user.username or "–Ω–µ—Ç_username"
    
    user_data[str(user_id)] = {
        "full_name": full_name,
        "username": username
    }
    save_user_data(user_data)
    
    await update.message.reply_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {full_name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥—ã –ò–ò
async def theorem_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: /theorem –¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞")
        return
    
    query = " ".join(context.args)
    await update.message.reply_chat_action(action="typing")
    
    prompt = (
        f"–î–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ–º—ã '{query}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:\n"
        f"- –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞\n- –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ\n- –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è\n- –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"
    )
    
    response = await ask_ai(prompt)
    if response:
        await update.message.reply_text(f"üìö –¢–µ–æ—Ä–µ–º–∞ {query}:\n\n{response}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def formula_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: /formula –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ")
        return
    
    query = " ".join(context.args)
    await update.message.reply_chat_action(action="typing")
    
    prompt = (
        f"–û–±—ä—è—Å–Ω–∏ —Ñ–æ—Ä–º—É–ª—É '{query}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:\n"
        f"- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å\n- –ü–æ—è—Å–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n- –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n- –¢–∏–ø–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏"
    )
    
    response = await ask_ai(prompt)
    if response:
        await update.message.reply_text(f"üßÆ –§–æ—Ä–º—É–ª–∞ {query}:\n\n{response}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä: /task –ù–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Ä–∞–¥–∏—É—Å–æ–º 5 —Å–º")
        return
    
    query = " ".join(context.args)
    await update.message.reply_chat_action(action="typing")
    
    prompt = (
        f"–†–µ—à–∏ –∑–∞–¥–∞—á—É: '{query}'. –î–∞–π –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞."
    )
    
    response = await ask_ai(prompt)
    if response:
        await update.message.reply_text(f"üìù –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n{response}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–æ—Ç–æ
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ API
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    elif context.args:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        query = " ".join(context.args)
        await update.message.reply_chat_action(action="typing")
        
        prompt = f"–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        
        response = await ask_ai(prompt)
        if response:
            await update.message.reply_text(f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n{response}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_owner(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await update.message.reply_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é):\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    return BROADCAST_MESSAGE

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    successful = 0
    failed = 0
    
    if update.message.text:
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        for user_id, data in user_data.items():
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è:\n\n{update.message.text}"
                )
                successful += 1
            except Exception as e:
                logger.error(f"Broadcast error to {user_id}: {str(e)}")
                failed += 1
    elif update.message.photo:
        # –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1].file_id
        caption = update.message.caption or ""
        
        for user_id, data in user_data.items():
            try:
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=f"üì¢ –û—Ç —É—á–∏—Ç–µ–ª—è:\n\n{caption}" if caption else "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è"
                )
                successful += 1
            except Exception as e:
                logger.error(f"Broadcast photo error to {user_id}: {str(e)}")
                failed += 1
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {successful}\n"
        f"‚Ä¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}"
    )
    return ConversationHandler.END

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_owner(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not user_data:
        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        return
    
    user_list = "\n".join(
        f"@{data['username']} - {data['full_name']} (ID: {user_id})"
        for user_id, data in user_data.items()
    )
    
    await update.message.reply_text(f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{user_list}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error: {context.error}")
    if update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            BROADCAST_MESSAGE: [
                MessageHandler(filters.TEXT | filters.PHOTO, broadcast_message),
                CommandHandler("cancel", cancel)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("theorem", theorem_command))
    app.add_handler(CommandHandler("formula", formula_command))
    app.add_handler(CommandHandler("task", task_command))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("broadcast", broadcast_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()

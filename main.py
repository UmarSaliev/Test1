import logging
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = list(map(int, os.getenv("OWNER_IDS", "").split(","))) if os.getenv("OWNER_IDS") else []
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_USERNAME = "@Tester894bot"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def is_owner(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
    return user_id in OWNER_IDS

async def ask_ai(prompt: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ OpenRouter API"""
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": f"https://t.me/{BOT_USERNAME[1:]}",
        "X-Title": "MathHelperBot"
    }
    payload = {
        "model": "openrouter/meta-llama/llama-3-8b-instruct:free",
        "messages": [{"role": "user", "content": prompt}]
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=15)
            ) as response:
                data = await response.json()
                return data["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"OpenRouter error: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

# –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        prompt = update.message.text
        response = await ask_ai(prompt)
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"Error in handle_text_message: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∑–∞–¥–∞—á—É, —Ñ–æ—Ä–º—É–ª—É –∏–ª–∏ —Ç–µ–æ—Ä–µ–º—É.\n"
        "–§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∏—Ç–µ–ª—é."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/task <—Ç–µ–∫—Å—Ç> - –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/formula <—Ç–µ–∫—Å—Ç> - –ù–∞–π—Ç–∏ —Ñ–æ—Ä–º—É–ª—É\n"
        "/theorem <—Ç–µ–∫—Å—Ç> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–æ—Ä–µ–º–µ\n"
        "/search <—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ> - –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    )
    
    if await is_owner(update.effective_user.id):
        help_text += "\n\nüë®‚Äçüè´ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∏—Ç–µ–ª—è:\n/broadcast - –†–∞—Å—Å—ã–ª–∫–∞\n/list - –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤"
    
    await update.message.reply_text(help_text)

async def theorem_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /theorem (–Ω–∞–ø—Ä–∏–º–µ—Ä: /theorem –¢–µ–æ—Ä–µ–º–∞ –í–∏–µ—Ç—Ç–∞)"""
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–æ—Ä–µ–º—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /theorem –ü–∏—Ñ–∞–≥–æ—Ä–∞")
        return
    
    theorem_name = " ".join(context.args)
    prompt = (
        f"–î–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ–º—ã {theorem_name}:\n"
        f"- –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞\n"
        f"- –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ\n"
        f"- –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è\n"
        f"- –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"
    )
    
    try:
        await update.message.reply_chat_action(action="typing")
        response = await ask_ai(prompt)
        await update.message.reply_text(f"üìö –¢–µ–æ—Ä–µ–º–∞ {theorem_name}:\n\n{response}")
    except Exception as e:
        logger.error(f"Theorem error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–æ—Ä–µ–º–µ")

async def formula_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /formula"""
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /formula –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ")
        return
    
    formula_name = " ".join(context.args)
    prompt = (
        f"–û–±—ä—è—Å–Ω–∏ —Ñ–æ—Ä–º—É–ª—É {formula_name}:\n"
        f"- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å\n"
        f"- –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞\n"
        f"- –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        f"- –¢–∏–ø–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏"
    )
    
    try:
        await update.message.reply_chat_action(action="typing")
        response = await ask_ai(prompt)
        await update.message.reply_text(f"üßÆ –§–æ—Ä–º—É–ª–∞ {formula_name}:\n\n{response}")
    except Exception as e:
        logger.error(f"Formula error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º—É–ª–µ")

async def task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /task"""
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /task –ù–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Ä–∞–¥–∏—É—Å–æ–º 5 —Å–º")
        return
    
    task_text = " ".join(context.args)
    prompt = (
        f"–†–µ—à–∏ –∑–∞–¥–∞—á—É: {task_text}\n"
        f"- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n"
        f"- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞\n"
        f"- –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
    )
    
    try:
        await update.message.reply_chat_action(action="typing")
        response = await ask_ai(prompt)
        await update.message.reply_text(f"üìù –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n{response}")
    except Exception as e:
        logger.error(f"Task error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É")

async def handle_photo_with_caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (–§–ò–û –∏ –¥—Ä.)"""
    photo = update.message.photo[-1].file_id
    caption = update.message.caption or "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
    
    user_info = (
        f"üë§ –û—Ç: {update.message.from_user.full_name}\n"
        f"üÜî ID: {update.message.from_user.id}\n"
        f"üìù –ü–æ–¥–ø–∏—Å—å: {caption}"
    )
    
    if OWNER_IDS:
        try:
            for owner_id in OWNER_IDS:
                await context.bot.send_photo(
                    chat_id=owner_id,
                    photo=photo,
                    caption=user_info
                )
            await update.message.reply_text("üì§ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∏—Ç–µ–ª—é!")
        except Exception as e:
            logger.error(f"Photo forwarding error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
    else:
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ")

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (/broadcast)"""
    if not await is_owner(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    
    await update.message.reply_text("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞")

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ (/list)"""
    if not await is_owner(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error: {context.error}")
    if update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    command_handlers = [
        ('start', start),
        ('help', help_command),
        ('theorem', theorem_command),
        ('formula', formula_command),
        ('task', task_command),
        ('broadcast', broadcast_command),
        ('list', list_command)
    ]
    
    for command, handler in command_handlers:
        app.add_handler(CommandHandler(command, handler))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.PHOTO & filters.CAPTION, handle_photo_with_caption))
    app.add_handler(MessageHandler(filters.PHOTO & ~filters.CAPTION, handle_photo_with_caption))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    app.run_polling()

if __name__ == "__main__":
    main()
